/*
 * Copyright (c) 2012, František Haas, Martin Lacina, Jaroslav Kotrč, Jiří Daniel
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the author nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package cz.cuni.mff.spl.annotation;

/**
 * The Measurement state description object. Allows to set measurement
 * progress and potential errors.
 * 
 * @author Martin Lacina
 */
public class MeasurementState {

    /** The OK flag. */
    private boolean   ok        = true;

    /** The last phase. */
    private LastPhase lastPhase = LastPhase.INITIALIZED;

    /** The message. */
    private String    message;

    /**
     * The Enum LastPhase.
     */
    public static enum LastPhase {
        /** The initialized. */
        INITIALIZED,
        /** The scanner added measurement to info. */
        SCANNER,
        /** The builder prepared sampler. */
        BUILD,
        /** The measurement was measured, i.e. data should be available. */
        MEASURED,
        /** The measurement failed. */
        FAILED,
        /** The measurement had error in evaluation (such as missing data). */
        EVALUATE
    }

    public void setOk(boolean ok) {
        this.ok = ok;
    }

    public boolean isOk() {
        return ok;
    }

    public void setLastPhase(LastPhase lastPhase) {
        this.lastPhase = lastPhase;
    }

    public LastPhase getLastPhase() {
        return lastPhase;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

    // generated by eclipse
    @Override
    public String toString() {
        return "MeasurementState [ok=" + ok + ", lastPhase=" + lastPhase + ", message=" + message + "]";
    }

    // generated by eclipse
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((lastPhase == null) ? 0 : lastPhase.hashCode());
        result = prime * result + ((message == null) ? 0 : message.hashCode());
        result = prime * result + (ok ? 1231 : 1237);
        return result;
    }

    // generated by eclipse
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        MeasurementState other = (MeasurementState) obj;
        if (lastPhase != other.lastPhase) {
            return false;
        }
        if (message == null) {
            if (other.message != null) {
                return false;
            }
        } else if (!message.equals(other.message)) {
            return false;
        }
        if (ok != other.ok) {
            return false;
        }
        return true;
    }

}
