/*
 * Copyright (c) 2012, František Haas, Martin Lacina, Jaroslav Kotrč, Jiří Daniel
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the author nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package cz.cuni.mff.spl.annotation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import cz.cuni.mff.spl.formula.context.ParserContext;
import cz.cuni.mff.spl.formula.context.ParserContext.Problem;
import cz.cuni.mff.spl.utils.EqualsUtils;
import cz.cuni.mff.spl.utils.StringUtils;

/**
 * Expanded variable for one measurement contains one set of concrete values in
 * order used in formula specification.
 * 
 * @author Jaroslav Kotrc
 * @author Martin Lacina
 * 
 */
public class ExpandedVariable extends Variable {
    private List<Integer> variables;

    public ExpandedVariable() {
        variables = new ArrayList<Integer>();
    }

    @Override
    public List<Integer> getVariables() {
        return variables;
    }

    public void setVariables(List<Integer> variables) {
        this.variables = variables;
    }

    /**
     * Converts variable generated by parser that has only name into expanded
     * variables used for measurement that has concrete value.
     * 
     * @param context
     *            context used by parser for error handling
     * @param valuesArr
     *            array of variable values
     * @param position
     *            mapping variable name to index in array of concrete values
     *            valuesArr
     * @param variable
     *            variable created by parser
     */
    public ExpandedVariable(ParserContext context, int[] valuesArr, Map<String, Integer> position, ParserVariable variable) {
        List<String> variableNames = variable.getVariableNames();
        variables = new ArrayList<Integer>(variableNames.size());
        for (String name : variableNames) {
            Integer positionIdx = position.get(name);
            Integer value = null;
            if (positionIdx == null) {
                try {
                    value = Integer.parseInt(name);
                } catch (NumberFormatException e) {
                    context.addError(new Problem("Variable " + name + " was not declared"));
                }
            } else {
                value = valuesArr[positionIdx];
                context.addUsedVariable(name);
            }
            Double param = context.getParameter(name);
            if ((param != null) && (Double.compare(param, value) != 0)) {
                context.addWarning(new Problem("Parameter " + name + " is real number, it will be converted to integer."));
            }
            variables.add(value);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((variables == null) ? 0 : variables.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        ExpandedVariable other = (ExpandedVariable) obj;
        return EqualsUtils.safeEquals(this.variables, other.variables);
    }

    @Override
    public String toString() {
        return Arrays.toString(getVariables().toArray());
    }

    @Override
    public String getDeclarationString() {
        return StringUtils.createOneString(variables, ", ", "(", ")");
    }

    @Override
    public String getIdentificationString() {
        return getDeclarationString();
    }
}
