/*
 * Copyright (c) 2012, František Haas, Martin Lacina, Jaroslav Kotrč, Jiří Daniel
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the author nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package spl;

/**
 * 
 * @author Frantisek Haas
 * 
 */
public class IntegerUniform extends AIntegerGenerator {

    private final int lowerBound;
    private final int upperBound;

    /**
     * <p>
     * Initializes integer uniform generator.
     * 
     * @param lowerBound_upperBound_returnType
     *            <p>
     *            Settings of the generator. For e.g. ("-10;10") or
     *            ("-10;10;array").
     * 
     * @see ArgumentType
     * 
     * @throws GeneratorException
     */
    public IntegerUniform(String lowerBound_upperBound_argumentType)
            throws GeneratorException {
        String args[] = lowerBound_upperBound_argumentType.split(SEPARATOR);

        if (args.length != 2 && args.length != 3) {
            throw new GeneratorException("Wrong arguments. Set '(int)lowerBound;(int)upperBound[;(str)argumentType]'.");
        }

        try {
            lowerBound = Integer.valueOf(args[0]);
        } catch (Throwable cause) {
            throw new GeneratorException("Failed to parse the lowerBound.");
        }

        try {
            upperBound = Integer.valueOf(args[1]);
        } catch (Throwable cause) {
            throw new GeneratorException("Failed to parse the upperBound.");
        }

        if (args.length == 3) {
            setArgumentType(ArgumentType.fromString(args[2]));
        }
    }

    @Override
    protected Object[] generateArrayPrimitive(int args) {
        int[] data = new int[args];

        for (int j = 0; j < data.length; j++) {
            data[j] = generator.nextInt(lowerBound, upperBound);
        }

        Object[] arg = new Object[1];
        arg[0] = data;
        return arg;
    }

    public static IGeneratorDescriptor getDescriptor() {

        return new IGeneratorDescriptor() {

            @Override
            public String getProposal() {
                return IntegerUniform.class.getCanonicalName() + "('lowerBound;upperBound;containerType')#generate()";
            }

            @Override
            public String getDescription() {
                return ""
                        + String.format("%s - %s\n",
                                "lowerBound",
                                "Lower bound of generated numbers")
                        + String.format("%s - %s\n",
                                "upperBound",
                                "Upper bound of generated numbers")
                        + String.format("%s - %s\n",
                                "containerType",
                                "Container to return numbers in. Optional. Default is primitive array. Values: {arrayPrimitive, array, list}")
                        + "Accepts two dynamical parameters in formula:\nFirst integer parameter says how many items should be generated by generator, second how many items in each of them.";
            }
        };
    }

}
